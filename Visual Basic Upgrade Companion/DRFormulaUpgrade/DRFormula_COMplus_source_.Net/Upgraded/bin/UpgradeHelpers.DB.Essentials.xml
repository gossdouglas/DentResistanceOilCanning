<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UpgradeHelpers.DB.Essentials</name>
    </assembly>
    <members>
        <member name="T:UpgradeHelpers.DB.AdoFactoryManager">
            <summary>
            This class provides a set of methods and internal classes to read the provider information from the xml configuration file.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoFactoryManager.InitializeFactorySection">
            <summary>
            Gets the factory section instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoFactoryManager.GetFactory">
            <summary>
            Gets the default factory.
            </summary>
            <returns>The default DBProviderFactory specified on the xml configuration file.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoFactoryManager.GetFactory(System.String)">
            <summary>
            Gets the factory according to the factory name.
            Note for OleDB, connectionString might differ based on x86/x64 environments.
            ConnectionStringx86 = "Provider=Microsoft.Jet.OLEDB.4.0;...";
            ConnectionStringx64 = "Provider=Microsoft.ACE.OLEDB.12.0;...";
            </summary>
            <param name="factoryName">Name of the desire factory.</param>
            <returns>Returns the DBProviderFactory that represents the parameter factoryName.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoFactoryManager.InDesignMode">
            <summary>
            Gets the design mode flag.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.AdoFactoryManager.LastFactoryNotFound">
            <summary>
            Just to avoid several repeated error messages
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoFactoryManager.GetFactoryDbType(System.String)">
            <summary>
            Gets the factory database type according to the factory name.
            </summary>
            <param name="factoryName">Name of the desire factory.</param>
            <returns>Returns the DatabaseType that represents the parameter factoryName.</returns>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoFactoriesConfigurationSection">
            <summary>
            Class to handle the custom configuration section.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.AdoFactoriesConfigurationSection.SECTION_NAME">
            <summary>
            Name of the section.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoFactoriesConfigurationSection.Factories">
            <summary>
            Gets and sets the factories collection.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.FactoryConfigurationElement">
            <summary>
            Represents the configuration file factory element.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElement.#ctor">
            <summary>
            Creates a new element instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElement.#ctor(System.String)">
            <summary>
            Creates a new element instance.
            </summary>
            <param name="factoryName">The factory name which represents this element.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElement.#ctor(System.String,System.String,UpgradeHelpers.DB.DatabaseType,System.Boolean)">
            <summary>
            Creates a new element instance.
            </summary>
            <param name="factoryName">The factory name which represents this element.</param>
            <param name="factoryType">The name of the factory type.</param>
            <param name="isDefault">Marks if the factory is the default.</param>
            <param name="databasetype">The database type.</param>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElement.Name">
            <summary>
            Gets and sets the factory name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElement.FactoryType">
            <summary>
            Gets and sets the factory type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElement.DatabaseType">
            <summary>
            Gets and sets the database type.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElement.IsDefault">
            <summary>
            Gets and sets the default flag.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.FactoryConfigurationElementsCollection">
            <summary>
            The collection of factory elements.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new element.
            </summary>
            <param name="elementName">The name of the new element.</param>
            <returns>The new element.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>The new element.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the element in the collection.
            </summary>
            <param name="element">The element to get the key from.</param>
            <returns>The element key.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.Item(System.String)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="name">The element key.</param>
            <returns>The element corresponding to the key.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.Item(System.Int32)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="index">The index key.</param>
            <returns>The element corresponding to the index.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.DefaultFactoryType">
            <summary>
            Gets the default factory type.
            </summary>
            <returns>The type name of the element.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.FactoryDbType(System.String)">
            <summary>
            Gets the factory dbtype according to the parameter.
            </summary>
            <param name="factoryname">The factory name to get the information from.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.Add(UpgradeHelpers.DB.FactoryConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="factory">The factory to be added.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.FactoryConfigurationElementsCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoNetHelper">
            <summary>
            Contains static helper methods for ADO.Net objects including Fast Serialization
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.SerializeTypedDataTable(System.Data.DataTable)">
             <summary>
             Serializes a Typed DataTable to a byte[] containing only the data
             (ie no infrastructure)
            
             The DataTable must be Typed and not a plain DataTable. It must also not have had any
             new columns added to it. In either of these cases, use SerializeDataTable instead.
             </summary>
             <param name="dataTable">The Typed DataTable to serialize.</param>
             <returns>A byte[] containing the serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.SerializeTypedDataSet(System.Data.DataSet)">
             <summary>
             Serializes a Typed DataSet to a byte[] containing only the data for each DataTable
             (ie no infrastructure)
            
             The DataSet must be Typed and not a plain DataSet. It must also not have had any
             new columns/tables added to it. In either of these cases, use SerializeDataSet instead.
             </summary>
             <param name="dataSet">The Typed DataSet to serialize.</param>
             <returns>A byte[] containing the serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.SerializeDataSet(System.Data.DataSet,System.Boolean)">
            <summary>
            Serializes a DataSet to a byte[].
            </summary>
            <param name="dataSet">The DataSet to serialize.</param>
            <returns>A byte[] containing the serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.SerializeDataTable(System.Data.DataTable)">
            <summary>
            Serializes a DataTable to a byte[].
            </summary>
            <param name="dataTable">The DataTable to serialize.</param>
            <returns>A byte[] containing the serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.SerializeSimpleTypedDataTable(System.Data.DataTable)">
             <summary>
             Serializes a simple Typed DataTable to a byte[] containing only data.
            
             A simple Typed DataTable will have no Errors associated with the rows
             or columns and all rows should be Unchanged/Added (deserialized
             rows will always be Unchanged).  Deleted rows will throw an exception.
             Designed for read-only tables which need to be serialized to a minumum size.
            
             </summary>
             <param name="dataTable">The Typed DataTable to serialize.</param>
             <returns>A byte[] containing the serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeTypedDataSet(System.Type,System.Byte[])">
             <summary>
             Deserializes a Typed DataSet from a byte[] containing serialized data only.
            
             The Type must match that from which the serialized data was originally obtained
             and it must have a parameterless constructor.
             </summary>
             <param name="dataSetType">The Type of Typed DataSet to deserialize.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns>A new DataSet of the requested type.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeTypedDataSet(System.Data.DataSet,System.Byte[])">
             <summary>
             Deserializes a Typed DataSet from a byte[] containing serialized data only.
            
             The DataSet must be of the same type from which the serialized data was originally obtained.
             </summary>
             <param name="dataSet">The Typed DataSet to deserialize into.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns>The same DataSet passed in.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeTypedDataTable(System.Type,System.Byte[])">
             <summary>
             Deserializes a Typed DataTable from a byte[] containing serialized data only.
            
             The Type must match that from which the serialized data was originally obtained
             and it must have a parameterless constructor.
             </summary>
             <param name="dataTableType">The Type of Typed DataTable to deserialize.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns>A new DataTable of the requested type.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeTypedDataTable(System.Data.DataTable,System.Byte[])">
             <summary>
             Deserializes a Typed DataTable from a byte[] containing serialized data only.
            
             The DataTable must be of the same type from which the serialized data was originally obtained.
             </summary>
             <param name="dataTable">The Typed DataTable to deserialize into.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns>The same DataTable passed in.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeDataSet(System.Type,System.Byte[])">
             <summary>
             Deserializes a DataSet or Typed DataSet from a byte[].
            
             The Type must match that from which the serialized data was originally obtained
             and it must have a parameterless constructor.
             </summary>
             <param name="dataSetType">The Type of DataSet to deserialize.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeDataSet(System.Byte[])">
            <summary>
            Creates a new DataSet and populates it from originally serialized data.
            </summary>
            <param name="serializedData">A byte[] containing the serialized data.</param>
            <returns>A new and populated DataSet.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeDataSet(System.Data.DataSet,System.Byte[])">
            <summary>
            Deserializes data and infrastructure into the supplied DataSet.
            </summary>
            <param name="dataSet">The DataSet to populate.</param>
            <param name="serializedData">A byte[] containing the serialized data.</param>
            <returns>The same DataSet passed in.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeDataTable(System.Byte[])">
            <summary>
            Creates a new DataTable and populates it with previously serialized data.
            </summary>
            <param name="serializedData">A byte[] containing the serialized data.</param>
            <returns>A new and populated DataTable</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeDataTable(System.Data.DataTable,System.Byte[])">
            <summary>
            Populates the supplied DataTable with previously serialized data.
            </summary>
            <param name="dataTable">The DataTable to populate.</param>
            <param name="serializedData">A byte[] containing the serialized data.</param>
            <returns>The same DataTable passed in.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeSimpleTypedDataTable(System.Data.DataTable,System.Byte[])">
             <summary>
             Populates an existing Typed DataTable with row data previously serialized using
             SerializeSimpleTypedDataTable.
            
             All rows will have Unchanged state even if they were Added or Modified at
             the time of serialization.
             </summary>
             <param name="dataTable">The DataTable into which to deserialize row data.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns>The same DataTable passed in.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.DeserializeSimpleTypedDataTable(System.Type,System.Byte[])">
             <summary>
             Create a new DataTable of the requested type and populates it with row data previously
             serialized using SerializeSimpleDataTable.
            
             The type must have a parameterless constuctor and should be of the same type as
             previously serialized.
            
             All rows will have Unchanged state even if they were Added or Modified at
             the time of serialization.
             </summary>
             <param name="dataTableType">The Type of DataTable to create.</param>
             <param name="serializedData">A byte[] containing the serialized data.</param>
             <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetValuesFromRowVersion(System.Data.DataRow,System.Data.DataRowVersion)">
            <summary>
            Returns an object[] of all the row values for the specified version
            </summary>
            <param name="row">The row from which to extract values</param>
            <param name="version"></param>
            <returns>An object[] holding the values.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetNullableDateTime(System.DateTime)">
            <summary>
            Maps DateTime.MinValue to DBNull.Value.
            </summary>
            <param name="value">The DateTime value to check.</param>
            <returns>DBNull.Value if the DateTime is MinValue; otherwise the DateTime value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetKeyValuesFromRow(System.Data.DataRow)">
            <summary>
            Gets an object[] holding the PrimaryKey column values.
            The Row must be in a DataTable.
            </summary>
            <param name="row">The row from which to find values.</param>
            <returns>An object[] holding the PrimaryKey values for the row, or an empty object[] if there is no PrimaryKey defined.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetKeyValuesFromRow(System.Data.DataRow,System.Data.DataTable)">
            <summary>
            Gets an object[] holding the values from the columns having the same names as those of the PrimaryKey columns
            from the supplied DataTable.
            </summary>
            <param name="row">The row from which to find values.</param>
            <param name="primaryKeyProvider">The DataTable holding the PrimaryKey columns.</param>
            <returns>An object[] holding the corresponding values for the row, or an empty object[] if there is no PrimaryKey defined.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetUniqueColumnValues(System.Data.DataRow[],System.String)">
            <summary>
            Gets a list of unique values for a column from a list of rows.
            </summary>
            <param name="rows">The DataRows in which to look for unique values.</param>
            <param name="columnName">The name of the column in which to look for unique values.</param>
            <returns>An ArrayList containing the unique values.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetUniqueColumnValues(System.Data.DataRow[],System.Int32)">
            <summary>
            Gets a list of unique values for a column from a list of rows.
            </summary>
            <param name="rows">The DataRows in which to look for unique values.</param>
            <param name="columnOrdinal">The ordinal of the column in which to look for unique values.</param>
            <returns>An ArrayList containing the unique values.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetUniqueColumnValues(System.Data.DataRow[],System.Data.DataColumn)">
            <summary>
            Gets a list of unique values for a column from a list of rows.
            </summary>
            <param name="rows">The DataRows in which to look for unique values.</param>
            <param name="column">The column in which to look for unique values.</param>
            <returns>An ArrayList containing the unique values.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetDataSetDump(System.Data.DataSet,System.String)">
             <summary>
             Create a simple string dump of the contents (each table) of a DataSet.
            
             Includes the key values for each row.
             </summary>
             <param name="dataset">The DataSet to dump</param>
             <param name="description">A description of the DataSet contents</param>
             <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.GetTableDump(System.Data.DataTable,System.String)">
            <summary>
            Dump Table
            </summary>
            <param name="dataTable">Data Table to dump</param>
            <param name="description">Custom Description</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoNetHelper.FastDeserializer.addColumnsToDataTable(System.Data.DataTable,System.Int32)">
            <summary>
            Adds columnCount empty columns to the dataTable
            </summary>
            <param name="dataTable">The table to add the columns to</param>
            <param name="columnCount">Number of columns to add</param>
        </member>
        <member name="T:UpgradeHelpers.DB.IModifiedTypedDataSet">
            <summary>
            Marker interface to signify that although the item is a Typed DataSet, it
            should be serialized as a plain DataSet since additional tables or columns
            may have been added to its schema
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.BOFActionEnum">
            <summary>
            BOF action values.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.BOFActionEnum.MoveFirst">
            <summary>
            MoveFirst
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.BOFActionEnum.BOF">
            <summary>
            Begin Of File
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.ConnectionContainers`1">
            <summary>
            This is the base class to administrate multiple connections under the same structure with the possibility to use a transactional model for all the connections.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.#ctor">
            <summary>
            Creates a new ConnectionContainers object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            Creates a new ConnectionContainers object and set the DBProviderFactory to “factory”.
            </summary>
            <param name="factory">The factory to be used by the connections created with this ConnectionContainers object.</param>
        </member>
        <member name="P:UpgradeHelpers.DB.ConnectionContainers`1.Factory">
            <summary>
            Sets the DBProviderFactory to be use in the connections created with this ConnectionContainers object.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.ConnectionContainers`1.Connections">
            <summary>
            Gets the list of all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.BeginTransaction(`0)">
            <summary>
            Begins a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be initiated.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.BeginTransaction">
            <summary>
            Begins a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.Close(`0)">
            <summary>
            Closes a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be close.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.Close">
            <summary>
            Closes a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.CommitTransaction(`0)">
            <summary>
            Commits a transaction for a specific connection.
            </summary>
            <param name="connection">The connection where the transaction will be committed.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.CommitTransaction">
            <summary>
            Commits a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.Rollback(`0)">
            <summary>
            Rollbacks a transaction for a specific connection.
            </summary>
            <param name="connection">The connection to work on.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.Rollback">
            <summary>
            Rollbacks a transaction for all connections contained in this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.Open(System.String)">
            <summary>
            Creates a new connection and opens it using the provided connection string.
            </summary>
            <param name="connectionString">The connection string with the information to connect to a database.</param>
            <returns>The newly created DBConnection object.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainers`1.result_StateChange(System.Object,System.Data.StateChangeEventArgs)">
            <summary>
            Event that notifies the current state of a change.
            </summary>
            <param name="sender">The object where the event was raised.</param>
            <param name="e">Additional event information.</param>
        </member>
        <member name="T:UpgradeHelpers.DB.ConnectionContainer">
            <summary>
            Class that contains a DbConnection.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.ConnectionContainer.Connection">
            <summary>
            The DbConnection contained by this class.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ConnectionContainer.Initialize">
            <summary>
            Initialize internal structures for this class.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.DbConnectionHelper">
            <summary>
            DbConnection Helper Class, used to control command timeouts defined in the connection object
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.DbConnectionHelper.ClearTimeOut(System.Data.Common.DbConnection)">
            <summary>
            Remove the timeout for a given connection.
            </summary>
            <param name="conn">connection object to clear timeout</param>
        </member>
        <member name="M:UpgradeHelpers.DB.DbConnectionHelper.SetCommandTimeOut(System.Data.Common.DbConnection,System.Int32)">
            <summary>
            Set the command timeout associated to a connection
            </summary>
            <param name="conn">The connection to set the timeout to.</param>
            <param name="t">timeout to set</param>
        </member>
        <member name="M:UpgradeHelpers.DB.DbConnectionHelper.GetCommandTimeOut(System.Data.Common.DbConnection)">
            <summary>
            Returns the command timeout associated to a connection.
            </summary>
            <param name="conn">The connection to get the timeout from.</param>
            <returns>The timeout associated with the parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.DbConnectionHelper.ResetCommandTimeOut(System.Data.Common.DbCommand)">
            <summary>
            Returns the current command with the timeout associated.
            </summary>
            <param name="commandRef">The connection to get the timeout from.</param>
            <returns>The timeout command associated.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.DBUtils.IsNumericType(System.Type)">
            <summary>
            Determines if a type is numeric.  Nullable numeric types are considered numeric.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.DBUtils.GetType(System.Data.DbType)">
            <summary>
                Converts from DbType to System.Type.
            </summary>
            <param name="dbType">The DBType to be converted.</param>
            <returns>The equivalent System.Type.</returns>
        </member>
        <member name="T:UpgradeHelpers.DB.EditModeEnum">
            <summary>
            Enum to describe the different edition modes for the Recordset
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EditModeEnum.EditNone">
            <summary>
            No edition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EditModeEnum.EditInProgress">
            <summary>
            Edition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EditModeEnum.EditAdd">
            <summary>
            Addition is in progress
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EditModeEnum.EditDelete">
            <summary>
            Delete is in progress
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.EngineHelper`1">
            <summary>
            Base class to provide the DBEngine functionality.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EngineHelper`1.connectionContainers">
            <summary>
            connectionContainers Template List
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EngineHelper`1.factory">
            <summary>
            DbProvider factory
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.EngineHelper`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.EngineHelper`1.#ctor(System.Data.Common.DbProviderFactory)">
            <summary>
            EngineHelper Constructor
            </summary>
            <param name="factory">set internal factory instance</param>
        </member>
        <member name="P:UpgradeHelpers.DB.EngineHelper`1.Item(System.Int32)">
            <summary>
            Array access
            </summary>
            <param name="index">index to access</param>
            <returns></returns>
        </member>
        <member name="T:UpgradeHelpers.DB.EOFActionEnum">
            <summary>
            EOF action values.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EOFActionEnum.MoveLast">
            <summary>
            Move Last
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EOFActionEnum.EOF">
            <summary>
            End of file
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.EOFActionEnum.Add">
            <summary>
            Add Record state
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.SerializationWriter">
             <summary>
             A SerializationWriter instance is used to store values and objects in a byte array.
            
             Once an instance is created, use the various methods to store the required data.
             ToArray() will return a byte[] containing all of the data required for deserialization.
             This can be stored in the SerializationInfo parameter in an ISerializable.GetObjectData() method.
             <para/>
             As an alternative to ToArray(), if you want to apply some post-processing to the serialized bytes, 
             such as compression, call AppendTokenTables first to ensure that the string and object token tables 
             are appended to the stream, and then cast BaseStream to MemoryStream. You can then access the
             MemoryStream's internal buffer as follows:
             <para/>
             <example><code>
             writer.AppendTokenTables();
             MemoryStream stream = (MemoryStream) writer.BaseStream;
             serializedData = MiniLZO.Compress(stream.GetBuffer(), (int) stream.Length);
             </code></example>
             </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.DefaultCapacity">
            <summary>
            Default capacity for the underlying MemoryStream
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.DefaultOptimizeForSize">
            <summary>
            The Default setting for the OptimizeForSize property.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.DateYearMask">
            <summary>
            Section masks used for packing DateTime values
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.IsNegativeSection">
            <summary>
            Section masks used for packing TimeSpan values
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.HighestOptimizable32BitValue">
            <summary>
            Holds the highest int that can be optimized into less than the normal 4 bytes
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.HighestOptimizable64BitValue">
            <summary>
            Holds the highest long that can be optimized into less than the normal 8 bytes
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.#ctor">
            <summary>
            Creates a FastSerializer with the Default Capacity (1kb)
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.#ctor(System.Int32)">
            <summary>
            Creates a FastSerializer with the specified capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.#ctor(System.IO.Stream)">
            <summary>
            Creates a FastSerializer around the specified stream
            Note: The stream must be seekable in this version to allow the token table 
            offset to be written on completion 
            </summary>
            <param name="stream">The seekable stream in which to store data</param>
        </member>
        <member name="P:UpgradeHelpers.DB.SerializationWriter.OptimizeForSize">
            <summary>
            Gets or Sets a boolean flag to indicate whether to optimize for size (default)
            by storing data as packed bits or sections where possible.
            Setting this value to false will turn off this optimization and store
            data directly which increases the speed.
            Note: This only affects optimization of data passed to the WriteObject method
            and direct calls to the WriteOptimized methods will always pack data into
            the smallest space where possible.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Collections.ArrayList)">
            <summary>
            Writes an ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null Arraylist takes 1 byte.
            An empty ArrayList takes 2 bytes.
            The contents are stored using WriteOptimized(ArrayList) which should be used
            if the ArrayList is guaranteed never to be null.
            </summary>
            <param name="value">The ArrayList to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Collections.BitArray)">
            <summary>
            Writes a BitArray value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            A null BitArray takes 1 byte.
            An empty BitArray takes 2 bytes.
            </summary>
            <param name="value">The BitArray value to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream.
            Stored Size: 4 bytes.
            </summary>
            <param name="value">The BitVector32 to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The DateTime value to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Guid)">
            <summary>
            Writes a Guid into the stream.
            Stored Size: 16 bytes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(UpgradeHelpers.DB.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows any object implementing IOwnedDataSerializable to serialize itself
            into this SerializationWriter.
            A context may also be used to give the object an indication of what data
            to store. As an example, using a BitVector32 gives a list of flags and
            the object can conditionally store data depending on those flags.
            </summary>
            <param name="target">The IOwnedDataSerializable object to ask for owned data</param>
            <param name="context">An arbtritrary object but BitVector32 recommended</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteObject(System.Object)">
            <summary>
            Stores an object into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on type and/or content.
            
            1 byte: null, DBNull.Value, Boolean
            
            1 to 2 bytes: Int16, UInt16, Byte, SByte, Char, 
            
            1 to 4 bytes: Int32, UInt32, Single, BitVector32
            
            1 to 8 bytes: DateTime, TimeSpan, Double, Int64, UInt64
            
            1 or 16 bytes: Guid
            
            1 plus content: string, object[], byte[], char[], BitArray, Type, ArrayList
            
            Any other object be stored using a .Net Binary formatter but this should 
            only be allowed as a last resort:
            Since this is effectively a different serialization session, there is a 
            possibility of the same shared object being serialized twice or, if the 
            object has a reference directly or indirectly back to the parent object, 
            there is a risk of looping which will throw an exception.
            
            The type of object is checked with the most common types being checked first.
            Each 'section' can be reordered to provide optimum speed but the check for
            null should always be first and the default serialization always last.
            
            Once the type is identified, a SerializedType byte is stored in the stream
            followed by the data for the object (certain types/values may not require
            storage of data as the SerializedType may imply the value).
            
            For certain objects, if the value is within a certain range then optimized
            storage may be used. If the value doesn't meet the required optimization
            criteria then the value is stored directly.
            The checks for optimization may be disabled by setting the OptimizeForSize
            property to false in which case the value is stored directly. This could 
            result in a slightly larger stream but there will be a speed increate to
            compensate.
            </summary>
            <param name="value">The object to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream.
            Stored Size: 8 bytes
            </summary>
            <param name="value">The TimeSpan value to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Collections.ArrayList)">
            <summary>
            Writes an non-null ArrayList into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty ArrayList takes 1 byte.
            </summary>
            <param name="value">The ArrayList to store. Must not be null.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Collections.BitArray)">
            <summary>
            Writes a BitArray into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on data content
            Notes:
            An empty BitArray takes 1 byte.
            </summary>
            <param name="value">The BitArray value to store. Must not be null.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Collections.Specialized.BitVector32)">
            <summary>
            Writes a BitVector32 into the stream using the fewest number of bytes possible.
            Stored Size: 1 to 4 bytes. (.Net is 4 bytes)
             1 to  7 bits takes 1 byte
             8 to 14 bits takes 2 bytes
            15 to 21 bits takes 3 bytes
            22 to 28 bits takes 4 bytes
            -------------------------------------------------------------------
            29 to 32 bits takes 5 bytes - use Write(BitVector32) method instead
            
            Try to order the BitVector32 masks so that the highest bits are least-likely
            to be set.
            </summary>
            <param name="value">The BitVector32 to store. Must not use more than 28 bits.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.DateTime)">
            <summary>
            Writes a DateTime value into the stream using the fewest number of bytes possible.
            Stored Size: 3 bytes to 7 bytes (.Net is 8 bytes)
            Notes:
            A DateTime containing only a date takes 3 bytes
            (except a .NET 2.0 Date with a specified DateTimeKind which will take a minimum
            of 5 bytes - no further optimization for this situation felt necessary since it
            is unlikely that a DateTimeKind would be specified without hh:mm also)
            Date plus hh:mm takes 5 bytes.
            Date plus hh:mm:ss takes 6 bytes.
            Date plus hh:mm:ss.fff takes 7 bytes.
            </summary>
            <param name="value">The DateTime value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Decimal)">
            <summary>
            Writes a Decimal value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte to 14 bytes (.Net is 16 bytes)
            Restrictions: None
            </summary>
            <param name="value">The Decimal value to store</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Int32)">
            <summary>
            Write an Int32 value using the fewest number of bytes possible.
            <para/>
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </summary>
            <remarks>
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0x07FFFFFF (268,435,456 and above) takes 5 bytes
            All negative numbers take 5 bytes
            
            Only call this method if the value is known to be between 0 and 
            268,435,455 otherwise use Write(Int32 value)
            </remarks>
            <param name="value">The Int32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Int64)">
            <summary>
            Write an Int64 value using the fewest number of bytes possible.
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            All negative numbers take 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(Int64 value)
            </summary>
            <param name="value">The Int64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.String)">
            <summary>
            Writes a string value into the stream using the fewest number of bytes possible.
            Stored Size: 1 byte upwards depending on string length
            Notes:
            Encodes null, Empty, 'Y', 'N', ' ' values as a single byte
            Any other single char string is stored as two bytes
            All other strings are stored in a string token list:
            
            The TypeCode representing the current string token list is written first (1 byte), 
            followed by the string token itself (1-4 bytes)
            
            When the current string list has reached 128 values then a new string list
            is generated and that is used for generating future string tokens. This continues
            until the maximum number (128) of string lists is in use, after which the string 
            lists are used in a round-robin fashion.
            By doing this, more lists are created with fewer items which allows a smaller 
            token size to be used for more strings.
            
            The first 16,384 strings will use a 1 byte token.
            The next 2,097,152 strings will use a 2 byte token. (This should suffice for most uses!)
            The next 268,435,456 strings will use a 3 byte token. (My, that is a lot!!)
            The next 34,359,738,368 strings will use a 4 byte token. (only shown for completeness!!!)
            </summary>
            <param name="value">The string to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.TimeSpan)">
            <summary>
            Writes a TimeSpan value into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes to 8 bytes (.Net is 8 bytes)
            Notes:
            hh:mm (time) are always stored together and take 2 bytes.
            If seconds are present then 3 bytes unless (time) is not present in which case 2 bytes
            since the seconds are stored in the minutes position.
            If milliseconds are present then 4 bytes.
            In addition, if days are present they will add 1 to 4 bytes to the above.
            </summary>
            <param name="value">The TimeSpan value to store. Must not contain sub-millisecond data.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Type)">
            <summary>
            Stores a non-null Type object into the stream.
            Stored Size: Depends on the length of the Type's name.
            If the type is a System type (mscorlib) then it is stored without assembly name information,
            otherwise the Type's AssemblyQualifiedName is used.
            </summary>
            <param name="value">The Type to store. Must not be null.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.UInt32)">
            <summary>
            Write a UInt32 value using the fewest number of bytes possible.
            0x00000000 - 0x0000007f (0 to 127) takes 1 byte
            0x00000080 - 0x000003FF (128 to 16,383) takes 2 bytes
            0x00000400 - 0x001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x00200000 - 0x0FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            ----------------------------------------------------------------
            0x10000000 - 0xFFFFFFFF (268,435,456 and above) takes 5 bytes
            
            Only call this method if the value is known to  be between 0 and 
            268,435,455 otherwise use Write(UInt32 value)
            </summary>
            <param name="value">The UInt32 to store. Must be between 0 and 268,435,455 inclusive.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.UInt64)">
            <summary>
            Write a UInt64 value using the fewest number of bytes possible.
            0x0000000000000000 - 0x000000000000007f (0 to 127) takes 1 byte
            0x0000000000000080 - 0x00000000000003FF (128 to 16,383) takes 2 bytes
            0x0000000000000400 - 0x00000000001FFFFF (16,384 to 2,097,151) takes 3 bytes
            0x0000000000200000 - 0x000000000FFFFFFF (2,097,152 to 268,435,455) takes 4 bytes
            0x0000000010000000 - 0x00000007FFFFFFFF (268,435,456 to 34,359,738,367) takes 5 bytes
            0x0000000800000000 - 0x000003FFFFFFFFFF (34,359,738,368 to 4,398,046,511,103) takes 6 bytes
            0x0000040000000000 - 0x0001FFFFFFFFFFFF (4,398,046,511,104 to 562,949,953,421,311) takes 7 bytes
            0x0002000000000000 - 0x00FFFFFFFFFFFFFF (562,949,953,421,312 to 72,057,594,037,927,935) takes 8 bytes
            ------------------------------------------------------------------
            0x0100000000000000 - 0x7FFFFFFFFFFFFFFF (72,057,594,037,927,936 to 9,223,372,036,854,775,807) takes 9 bytes
            0x7FFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFFFFF (9,223,372,036,854,775,807 and above) takes 10 bytes
            
            Only call this method if the value is known to be between 0 and
            72,057,594,037,927,935 otherwise use Write(UInt64 value)
            </summary>
            <param name="value">The UInt64 to store. Must be between 0 and 72,057,594,037,927,935 inclusive.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.Write(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.DateTime[])">
            <summary>
            Writes a DateTime[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The DateTime[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Object[])">
            <summary>
            Writes a not-null object[] into the stream using the fewest number of bytes possible.
            Stored Size: 2 bytes upwards depending on data content
            Notes:
            An empty object[] takes 1 byte.
            The contents of the array will be stored optimized.
            </summary>
            <param name="values">The object[] to store. Must not be null.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Object[],System.Object[])">
            <summary>
            Writes a pair of object[] arrays into the stream using the fewest number of bytes possible.
            The arrays must not be null and must have the same length
            The first array's values are written optimized
            The second array's values are compared against the first and, where identical, will be stored
            using a single byte.
            Useful for storing entity data where there is a before-change and after-change set of value pairs
            and, typically, only a few of the values will have changed.
            </summary>
            <param name="values1">The first object[] value which must not be null and must have the same length as values2</param>
            <param name="values2">The second object[] value which must not be null and must have the same length as values1</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Int32[])">
            <summary>
            Writes an Int32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int32[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.Int64[])">
            <summary>
            Writes an Int64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The Int64[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.TimeSpan[])">
            <summary>
            Writes a TimeSpan[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.UInt32[])">
            <summary>
            Writes a UInt32[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt32[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteOptimized(System.UInt64[])">
            <summary>
            Writes a UInt64[] into the stream using the fewest possible bytes.
            Notes:
            A null or empty array will take 1 byte.
            </summary>
            <param name="values">The UInt64[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteTypedArray(System.Array)">
            <summary>
            Writes a null or a typed array into the stream.
            </summary>
            <param name="values">The array to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.AppendTokenTables">
            <summary>
            Writes the contents of the string and object token tables into the stream.
            Also write the starting offset into the first 4 bytes of the stream.
            Notes:
            Called automatically by ToArray().
            Can be used to ensure that the complete graph is written before using an
            alternate technique of extracting a Byte[] such as using compression on
            the underlying stream.
            </summary>
            <returns>The length of the string and object tables.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.ToArray">
            <summary>
            Returns a byte[] containing all of the serialized data.
            
            The current implementation has the data in 3 sections:
            1) A 4 byte Int32 giving the offset to the 3rd section.
            2) The main serialized data.
            3) The serialized string tokenization lists and object
               tokenization lists.
            
            Only call this method once all of the data has been serialized.
            
            This method appends all of the tokenized data (string and object)
            to the end of the stream and ensures that the first four bytes
            reflect the offset of the tokenized data so that it can be
            deserialized first.
            This is the reason for requiring a rewindable stream.
            
            Future implementations may also allow the serialized data to be
            accessed via 2 byte[] arrays. This would remove the requirement
            for a rewindable stream opening the possibility of streaming the
            serialized data directly over the network allowing simultaneous
            of partially simultaneous deserialization.
            </summary>
            <returns>A byte[] containing all serialized data.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteStringDirect(System.String)">
            <summary>
            Writes a non-null string directly to the stream without tokenization.
            </summary>
            <param name="value">The string to store. Must not be null.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteTokenizedObject(System.Object)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            The object will be serialized once and recreated at deserialization time.
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.WriteTokenizedObject(System.Object,System.Boolean)">
            <summary>
            Writes a token (an Int32 taking 1 to 4 bytes) into the stream that represents the object instance.
            The same token will always be used for the same object instance.
            
            When recreateFromType is set to true, the object's Type will be stored and the object recreated using 
            Activator.GetInstance with a parameterless contructor. This is useful for stateless, factory-type classes.
            
            When recreateFromType is set to false, the object will be serialized once and recreated at deserialization time.
            
            Calls to SerializationReader.ReadTokenizedObject() will retrieve the same object instance.
            </summary>
            <param name="value">The object to tokenize. Must not be null and must not be a string.</param>
            <param name="recreateFromType">true if the object can be recreated using a parameterless constructor; 
            false if the object should be serialized as-is</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.encodeTimeSpan(System.TimeSpan,System.Boolean,System.Int32)">
            <summary>
            Encodes a TimeSpan into the fewest number of bytes.
            Has been separated from the WriteOptimized(TimeSpan) method so that WriteOptimized(DateTime)
            can also use this for .NET 2.0 DateTimeKind information.
            By taking advantage of the fact that a DateTime's TimeOfDay portion will never use the IsNegative
            and HasDays flags, we can use these 2 bits to store the DateTimeKind and, since DateTimeKind is
            unlikely to be set without a Time, we need no additional bytes to support a .NET 2.0 DateTime.
            </summary>
            <param name="value">The TimeSpan to store.</param>
            <param name="partOfDateTime">True if the TimeSpan is the TimeOfDay from a DateTime; False if a real TimeSpan.</param>
            <param name="initialData">The intial data for the BitVector32 - contains DateTimeKind or 0</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.checkOptimizable(System.Boolean,System.String)">
            <summary>
            Checks whether an optimization condition has been met and throw an exception if not.
            
            This method has been made conditional on THROW_IF_NOT_OPTIMIZABLE being set at compile time.
            By default, this is set if DEBUG is set but could be set explicitly if exceptions are required and
            the evaluation overhead is acceptable. 
            If not set, then this method and all references to it are removed at compile time.
            
            Leave at the default for optimum usage.
            </summary>
            <param name="condition">An expression evaluating to true if the optimization condition is met, false otherwise.</param>
            <param name="message">The message to include in the exception should the optimization condition not be met.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.write7bitEncodedSigned32BitValue(System.Int32)">
            <summary>
            Stores a 32-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int32) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int32 value to encode.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.write7bitEncodedSigned64BitValue(System.Int64)">
            <summary>
            Stores a 64-bit signed value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(Int64) for details of the values that are optimizable.
            </summary>
            <param name="value">The Int64 value to encode.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.write7bitEncodedUnsigned32BitValue(System.UInt32)">
            <summary>
            Stores a 32-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(UInt32) for details of the values that are optimizable.
            </summary>
            <param name="value">The UInt32 value to encode.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.write7bitEncodedUnsigned64BitValue(System.UInt64)">
            <summary>
            Stores a 64-bit unsigned value into the stream using 7-bit encoding.
            
            The value is written 7 bits at a time (starting with the least-significant bits) until there are no more bits to write.
            The eighth bit of each byte stored is used to indicate whether there are more bytes following this one.
            
            See Write(ULong) for details of the values that are optimizable.
            </summary>
            <param name="value">The ULong value to encode.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Boolean[])">
            <summary>
            Internal implementation to store a non-null Boolean[].
            </summary>
            <remarks>
            Stored as a BitArray for optimization.
            </remarks>
            <param name="values">The Boolean[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Byte[])">
            <summary>
            Internal implementation to store a non-null Byte[].
            </summary>
            <param name="values">The Byte[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Char[])">
            <summary>
            Internal implementation to store a non-null Char[].
            </summary>
            <param name="values">The Char[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.DateTime[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non, null DateTime[] using a BitArray to 
            determine which elements are optimizable.
            </summary>
            <param name="values">The DateTime[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Decimal[])">
            <summary>
            Internal implementation to store a non-null Decimal[].
            </summary>
            <remarks>
            All elements are stored optimized.
            </remarks>
            <param name="values">The Decimal[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Double[])">
            <summary>
            Internal implementation to store a non-null Double[].
            </summary>
            <param name="values">The Double[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Single[])">
            <summary>
            Internal implementation to store a non-null Single[].
            </summary>
            <param name="values">The Single[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Guid[])">
            <summary>
            Internal implementation to store a non-null Guid[].
            </summary>
            <param name="values">The Guid[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Int32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null Int32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Int64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to writes a non-null Int64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The Int64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.SByte[])">
            <summary>
            Internal implementation to store a non-null SByte[].
            </summary>
            <param name="values">The SByte[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.Int16[])">
            <summary>
            Internal implementation to store a non-null Int16[].
            </summary>
            <param name="values">The Int16[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.TimeSpan[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null TimeSpan[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The TimeSpan[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.UInt32[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt32[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt32[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.UInt16[])">
            <summary>
            Internal implementation to store a non-null UInt16[].
            </summary>
            <param name="values">The UIn16[] to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeArray(System.UInt64[],System.Collections.BitArray)">
            <summary>
            Internal implementation to write a non-null UInt64[] using a BitArray to determine which elements are optimizable.
            </summary>
            <param name="values">The UInt64[] to store.</param>
            <param name="optimizeFlags">A BitArray indicating which of the elements which are optimizable; 
            a reference to constant FullyOptimizableValueArray if all the elements are optimizable; or null
            if none of the elements are optimizable.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeObjectArray(System.Object[])">
            <summary>
            Writes the values in the non-null object[] into the stream.
            
            Sequences of null values and sequences of DBNull.Values are stored with a flag and optimized count.
            Other values are stored using WriteObject().
            
            This routine is called by the Write(object[]), WriteOptimized(object[]) and Write(object[], object[])) methods.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeTypeCode(UpgradeHelpers.DB.SerializedType)">
            <summary>
            Stores the specified SerializedType code into the stream.
            
            By using a centralized method, it is possible to collect statistics for the
            type of data being stored in DEBUG mode.
            
            Use the DumpTypeUsage() method to show a list of used SerializedTypes and
            the number of times each has been used. This method and the collection code
            will be optimized out when compiling in Release mode.
            </summary>
            <param name="typeCode">The SerializedType to store.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeTypedArray(System.Array,System.Boolean)">
            <summary>
            Internal implementation to write a non-null typed array into the stream.
            </summary>
            <remarks>
            Checks first to see if the element type is a primitive type and calls the 
            correct routine if so. Otherwise determines the best, optimized method
            to store the array contents.
            <para/>
            An array of object elements never stores its type.
            </remarks>
            <param name="value">The non-null typed array to store.</param>
            <param name="storeType">True if the type should be stored; false otherwise</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.isTypeRecreatable(System.Type)">
            <summary>
            Checks whether instances of a Type can be created.
            </summary>
            <remarks>
            A Value Type only needs to implement IOwnedDataSerializable. 
            A Reference Type needs to implement IOwnedDataSerializableAndRecreatable and provide a default constructor.
            </remarks>
            <param name="type">The Type to check</param>
            <returns>true if the Type is recreatable; false otherwise.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.arrayElementsAreSameType(System.Object[],System.Type)">
            <summary>
            Checks whether each element in an array is of the same type.
            </summary>
            <param name="values">The array to check</param>
            <param name="elementType">The expected element type.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.writeTypedArrayTypeCode(System.Collections.BitArray,System.Int32)">
            <summary>
            Writes the TypeCode for the Typed Array followed by the number of elements.
            </summary>
            <param name="optimizeFlags"></param>
            <param name="length"></param>
        </member>
        <member name="T:UpgradeHelpers.DB.SerializationWriter.SingletonTypeWrapper">
            <summary>
            Private class used to wrap an object that is to be tokenized, and recreated at deserialization by its type.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.SerializationWriter.typeUsage">
            <summary>
            Type Usage variable
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationWriter.DumpTypeUsage">
            <summary>
            Dump Type Usage
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.SerializationWriter.UniqueStringList">
            <summary>
            Provides a faster way to store string tokens both maintaining the order that they were added and
            providing a fast lookup.
            
            Based on code developed by ewbi at http://ewbi.blogs.com/develops/2006/10/uniquestringlis.html
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.SerializationReader">
             <summary>
             A SerializationReader instance is used to read stored values and objects from a byte array.
            
             Once an instance is created, use the various methods to read the required data.
             The data read MUST be exactly the same type and in the same order as it was written.
             </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.#ctor(System.Byte[])">
            <summary>
            Creates a SerializationReader using a byte[] previous created by SerializationWriter
            
            A MemoryStream is used to access the data without making a copy of it.
            </summary>
            <param name="data">The byte[] containining serialized data.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.#ctor(System.IO.Stream)">
            <summary>
            Creates a SerializationReader based on the passed Stream.
            </summary>
            <param name="stream">The stream containing the serialized data</param>
        </member>
        <member name="P:UpgradeHelpers.DB.SerializationReader.BytesRemaining">
            <summary>
            Returns the number of bytes or serialized remaining to be processed.
            Useful for checking that deserialization is complete.
            
            Warning: Retrieving the Position in certain stream types can be expensive,
            e.g. a FileStream, so use sparingly unless known to be a MemoryStream.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadBitVector32">
            <summary>
            Returns a BitVector32 value from the stream.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadDateTime">
            <summary>
            Returns a DateTime value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadGuid">
            <summary>
            Returns a Guid value from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadObject">
            <summary>
            Returns an object based on the SerializedType read next from the stream.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadString">
            <summary>
            Called ReadOptimizedString().
            This override to hide base BinaryReader.ReadString().
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadStringDirect">
            <summary>
            Returns a string value from the stream.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedArrayList">
            <summary>
            Returns an ArrayList from the stream that was stored optimized.
            </summary>
            <returns>An ArrayList instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedBitArray">
            <summary>
            Returns a BitArray from the stream that was stored optimized.
            </summary>
            <returns>A BitArray instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedBitVector32">
            <summary>
            Returns a BitVector32 value from the stream that was stored optimized.
            </summary>
            <returns>A BitVector32 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedDateTime">
            <summary>
            Returns a DateTime value from the stream that was stored optimized.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedDecimal">
            <summary>
            Returns a Decimal value from the stream that was stored optimized.
            </summary>
            <returns>A Decimal value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedInt32">
            <summary>
            Returns an Int32 value from the stream that was stored optimized.
            </summary>
            <returns>An Int32 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedInt64">
            <summary>
            Returns an Int64 value from the stream that was stored optimized.
            </summary>
            <returns>An Int64 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedObjectArray">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            </summary>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedObjectArray(System.Type)">
            <summary>
            Returns an object[] from the stream that was stored optimized.
            The returned array will be typed according to the specified element type
            and the resulting array can be cast to the expected type.
            e.g.
            string[] myStrings = (string[]) reader.ReadOptimizedObjectArray(typeof(string));
            
            An exception will be thrown if any of the deserialized values cannot be
            cast to the specified elementType.
            
            </summary>
            <param name="elementType">The Type of the expected array elements. null will return a plain object[].</param>
            <returns>An object[] instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedObjectArrayPair(System.Object[]@,System.Object[]@)">
            <summary>
            Returns a pair of object[] arrays from the stream that were stored optimized.
            </summary>
            <returns>A pair of object[] arrays.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedString">
            <summary>
            Returns a string value from the stream that was stored optimized.
            </summary>
            <returns>A string value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedTimeSpan">
            <summary>
            Returns a TimeSpan value from the stream that was stored optimized.
            </summary>
            <returns>A TimeSpan value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedType">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedType(System.Boolean)">
            <summary>
            Returns a Type from the stream.
            
            Throws an exception if the Type cannot be found and throwOnError is true.
            </summary>
            <returns>A Type instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedUInt32">
            <summary>
            Returns a UInt32 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt32 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedUInt64">
            <summary>
            Returns a UInt64 value from the stream that was stored optimized.
            </summary>
            <returns>A UInt64 value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadDateTimeArray">
            <summary>
            Returns a DateTime[] from the stream.
            </summary>
            <returns>A DateTime[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadInt32Array">
            <summary>
            Returns an Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadInt64Array">
            <summary>
            Returns an Int64[] from the stream.
            </summary>
            <returns>An Int64[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedStringArray">
            <summary>
            Returns a string[] from the stream that was stored optimized.
            </summary>
            <returns>An string[] instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadTimeSpanArray">
            <summary>
            Returns a TimeSpan[] from the stream.
            </summary>
            <returns>A TimeSpan[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadUInt32Array">
            <summary>
            Returns a UInt[] from the stream.
            </summary>
            <returns>A UInt[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadUInt64Array">
            <summary>
            Returns a UInt64[] from the stream.
            </summary>
            <returns>A UInt64[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOptimizedInt32Array">
            <summary>
            Returns a Int32[] from the stream.
            </summary>
            <returns>An Int32[] instance; or null.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.ReadOwnedData(UpgradeHelpers.DB.IOwnedDataSerializable,System.Object)">
            <summary>
            Allows an existing object, implementing IOwnedDataSerializable, to 
            retrieve its owned data from the stream.
            </summary>
            <param name="target">Any IOwnedDataSerializable object.</param>
            <param name="context">An optional, arbitrary object to allow context to be provided.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.decodeTimeSpan(System.Byte)">
            <summary>
            Returns a TimeSpan decoded from packed data.
            This routine is called from ReadOptimizedDateTime() and ReadOptimizedTimeSpan().
            <remarks>
            This routine uses a parameter to allow ReadOptimizedDateTime() to 'peek' at the
            next byte and extract the DateTimeKind from bits one and two (IsNegative and HasDays)
            which are never set for a Time portion of a DateTime.
            </remarks>
            </summary>
            <param name="initialByte">The first of two always-present bytes.</param>
            <returns>A decoded TimeSpan</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readTypedArrayOptimizeFlags(UpgradeHelpers.DB.SerializedType)">
            <summary>
            Creates a BitArray representing which elements of a typed array
            are serializable.
            </summary>
            <param name="serializedType">The type of typed array.</param>
            <returns>A BitArray denoting which elements are serializable.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.processObject(UpgradeHelpers.DB.SerializedType)">
            <summary>
            Returns an object based on supplied SerializedType.
            </summary>
            <returns>An object instance.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.processArrayTypes(UpgradeHelpers.DB.SerializedType,System.Type)">
            <summary>
            Determine whether the passed-in type code refers to an array type
            and deserializes the array if it is.
            Returns null if not an array type.
            </summary>
            <param name="typeCode">The SerializedType to check.</param>
            <param name="defaultElementType">The Type of array element; null if to be read from stream.</param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readTokenizedString(System.Int32)">
            <summary>
            Returns the string value associated with the string token read next from the stream.
            </summary>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readTypeCode">
            <summary>
            Returns the SerializedType read next from the stream.
            </summary>
            <returns>A SerializedType value.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readBooleanArray">
            <summary>
            Internal implementation returning a Bool[].
            </summary>
            <returns>A Bool[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readByteArray">
            <summary>
            Internal implementation returning a Byte[].
            </summary>
            <returns>A Byte[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readCharArray">
            <summary>
            Internal implementation returning a Char[].
            </summary>
            <returns>A Char[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readDecimalArray">
            <summary>
            Internal implementation returning a Decimal[].
            </summary>
            <returns>A Decimal[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readDoubleArray">
            <summary>
            Internal implementation returning a Double[].
            </summary>
            <returns>A Double[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readGuidArray">
            <summary>
            Internal implementation returning a Guid[].
            </summary>
            <returns>A Guid[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readInt16Array">
            <summary>
            Internal implementation returning an Int16[].
            </summary>
            <returns>An Int16[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readSByteArray">
            <summary>
            Internal implementation returning an SByte[].
            </summary>
            <returns>An SByte[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readSingleArray">
            <summary>
            Internal implementation returning a Single[].
            </summary>
            <returns>A Single[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.readUInt16Array">
            <summary>
            Internal implementation returning a UInt16[].
            </summary>
            <returns>A UInt16[].</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.SerializationReader.DumpStringTables(System.Collections.ArrayList)">
            <summary>
            Dump String Tables
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:UpgradeHelpers.DB.OptimizationException">
            <summary>
            Exception thrown when a value being optimized does not meet the required criteria for optimization.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.OptimizationException.#ctor(System.String)">
            <summary>
            Exception thrown when a value being optimized does not meet the required criteria for optimization.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:UpgradeHelpers.DB.IOwnedDataSerializableAndRecreatable">
            <summary>
            Allows a class to specify that it can be recreated during deserialization using a default constructor
            and then calling DeserializeOwnedData()
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.IOwnedDataSerializable">
            <summary>
            Allows a class to save/retrieve their internal data to/from an existing SerializationWriter/SerializationReader.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.IOwnedDataSerializable.SerializeOwnedData(UpgradeHelpers.DB.SerializationWriter,System.Object)">
            <summary>
            Lets the implementing class store internal data directly into a SerializationWriter.
            </summary>
            <param name="writer">The SerializationWriter to use</param>
            <param name="context">Optional context to use as a hint as to what to store (BitVector32 is useful)</param>
        </member>
        <member name="M:UpgradeHelpers.DB.IOwnedDataSerializable.DeserializeOwnedData(UpgradeHelpers.DB.SerializationReader,System.Object)">
            <summary>
            Lets the implementing class retrieve internal data directly from a SerializationReader.
            </summary>
            <param name="reader">The SerializationReader to use</param>
            <param name="context">Optional context to use as a hint as to what to retrieve (BitVector32 is useful) </param>
        </member>
        <member name="T:UpgradeHelpers.DB.SerializedType">
            <summary>
            Stores information about a type or type/value.
            Internal use only.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.FieldAttributeEnum">
            <summary>
            Specifies the attributes of a field object
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.FieldHelper">
            <summary>
            It simulates a VB6 Field, contains the Value and FieldMetadata
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldHelper.#ctor(UpgradeHelpers.DB.RecordSetHelper,System.Object)">
            <summary>
            Constructor for recordset-bound mode
            </summary>
            <param name="rs">The recordset for this Field.</param>
            <param name="columnReference">The column index or column string to get the Field in the recordset.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldHelper.#ctor(System.Data.DataColumn)">
            <summary>
            Constructor for metadata mode
            </summary>
            <param name="dataColumn">The DataColumn object that contains the field metadata.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldHelper.#ctor">
            <summary>
            Constructor for metadata mode with no parameters
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FieldHelper.Value">
            <summary>
            Value for this Field
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FieldHelper.FieldMetadata">
            <summary>
            Metadata for this Field
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldHelper.ToString">
            <summary>
            Returns a string representation of the field's value
            </summary>
            <returns></returns>
        </member>
        <member name="P:UpgradeHelpers.DB.FieldHelper.OriginalValue">
            <summary>
            Original Value Property for AdoRecorset Field
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.FieldsHelper">
            <summary>
            It simulates a VB6 Field, contains the Value and FieldMetadata
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldsHelper.GetEnumerator">
            <summary>
            Implements IEnumerator
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldsHelper.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implements IEnumerator
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldsHelper.#ctor(UpgradeHelpers.DB.RecordSetHelper)">
            <summary>
            Creates a FieldsHelper associated to a RecordsetHelper
            </summary>
            <param name="rs">The recordset for this Field.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldsHelper.Append(System.String,System.Data.DbType,System.Int32,UpgradeHelpers.DB.FieldAttributeEnum,System.Object[])">
            <summary>
            Add a column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FieldsHelper.Count">
            <summary>
            Returns the count for the RecordsetHelper columns
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.FieldsHelper.Delete(System.Int32)">
            <summary>
            Removes a column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.FieldsHelper.Item(System.Object)">
            <summary>
            Access a FieldHelper
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.IConnectionContainers">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.IConnectionContainers.Factory">
            <summary>
            
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.LockTypeEnum">
            <summary>Sets or returns the type of locking (concurrency) to use.</summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockUnspecified">
            <summary>
            Lock not specified, value -1
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockReadOnly">
            <summary>
            Read Only Lock, value 1
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockPessimistic">
            <summary>
            Pessimistic Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockOptimistic">
            <summary>
            Optimistic Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockBatchOptimistic">
            <summary>
            Batch Optimistic Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockLock">
            <summary>
            Locked
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockRowver">
            <summary>
            Row Lock
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.LockTypeEnum.LockValues">
            <summary>
            Value Lock
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.DatabaseType">
            <summary>
            Database Type Enum
            </summary>
            /*
        </member>
        <member name="F:UpgradeHelpers.DB.DatabaseType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.DatabaseType.SQLServer">
            <summary>
            SqlServer
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.DatabaseType.Access">
            <summary>
            MS Access
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.DatabaseType.Undefined">
            <summary>
            Not defined
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.IdentityColumnsManager">
             <summary>
             This class stores information on the columns whose 
             values are set on the database automatically, 
             either by triggers or automatically because they are an identity column.
            <AdoIdentityColumns>
             <IdentityColumns>
                 <add tablename="CR_Customreport">
                     <columns>
                         <add columnname="CR_ID" sequencename="CR_ID"/>
                     </columns>
                 </add>
             </IdentityColumns>
            </AdoIdentityColumns>
             </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.IdentityColumnsManager._configSection">
            <summary>
            Holds the section instance.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.IdentityColumnsManager.Identities">
            <summary>
            Holds the indentities information.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.IdentityColumnsManager.ConfigSection">
            <summary>
            Gets the configurtion section instance.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.IdentityColumnsManager.GetIndentityInformation(System.String)">
            <summary>
            Gets the identity information for an specific table.
            </summary>
            <param name="_TableName">The name of the table to get the identity information.</param>
            <returns>A dictionary containing the indentity information for the specified table.</returns>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoIdentityColumnsConfigurationSection">
            <summary>
            Represents the configuration section to handle the identity column information.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.AdoIdentityColumnsConfigurationSection.SECTION_NAME">
            <summary>
            The section name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoIdentityColumnsConfigurationSection.Tables">
            <summary>
            Gets the tables collections.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection">
            <summary>
            The collection of identity elements.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new element.
            </summary>
            <param name="elementName">The name of the new element to be created.</param>
            <returns>The new instance of the configuration element.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.CreateNewElement">
            <summary>
            Creates a new element.
            </summary>
            <returns>The new instance of the configuration element.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the key of the element in the collection.
            </summary>
            <param name="element">The element to get the key from.</param>
            <returns>The element key.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.Item(System.String)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="name">The element key.</param>
            <returns>The element corresponding to the key.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.Item(System.Int32)">
            <summary>
            Indexer to retrieve an specific element.
            </summary>
            <param name="index">The index key.</param>
            <returns>The element corresponding to the index.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.Add(UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="tableConfig">The factory to be added.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityColumnTableConfigurationElementCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Adds a new element to the collection.
            </summary>
            <param name="element">The element to be added.</param>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement">
            <summary>
            The configuration element to define the identity columns on a table.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement.#ctor">
            <summary>
            Creates a new element.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement.#ctor(System.String)">
            <summary>
            Creates a new element with the specific name.
            </summary>
            <param name="tableName">The table name.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement.#ctor(System.String,UpgradeHelpers.DB.AdoIdentityColumnConfigurationElementCollection)">
            <summary>
            Creates a new element with the specific values.
            </summary>
            <param name="tableName">The table name.</param>
            <param name="colums">The columns collection.</param>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement.TableName">
            <summary>
            Gets and sets the Table name.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.AdoIdentityTableColumnConfigurationElement.Columns">
            <summary>
            Gets and sets the colimns collection.
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.AdoIdentityColumnConfigurationElementCollection">
            <summary>
            Class to ADO Identity column configuration
            </summary>
        </member>
        <member name="T:UpgradeHelpers.DB.DAO.ParametersHelper">
            <summary>
            Class to handle Database command parameters complex functionality
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.DAO.ParametersHelper.DeriveParameters(System.Data.Common.DbCommand,System.Data.Common.DbProviderFactory)">
            <summary>
            Extracts the command information from the command object and add specific information based on the factory being use.
            </summary>
            <param name="theCommand">Command to be processed.</param>
            <param name="factory">The factory to be use.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.DAO.ParametersHelper.DeriveParametersFromProcedureCode(System.Data.Common.DbCommand)">
            <summary>
            Extracts the command information from the command object and add specific information based on the factory being use.
            </summary>
            <param name="connection">The connection to extract the information from.</param>
            <param name="pivotCommand">Command to be processed.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.DAO.ParametersHelper.getDbType(System.String)">
            <summary>
            Gets the corresponding DBType for the string received has parameter.
            </summary>
            <param name="p">The string with the name of the type to convert to DBType.</param>
            <returns>The DBType that correspond to the name revieved has parameter, otherwise DBType.String.</returns>
        </member>
        <member name="T:UpgradeHelpers.DB.RecordSetHelper">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._autoIncrementCol">
            <summary> Auto increment column name </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._fields">
            <summary>
            Contains the FieldsHelper associated to this RecordSetHelper
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._connectionStateAtEntry">
            <summary> Actual Connection State </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._connectionString">
            <summary> Connection String </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._defaultValues">
            <summary> Holds default values for each column </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._disconnected">
            <summary> Internal variable added to indicate that the recordset is disconnected </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._editMode">
            <summary> Edit Mode </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._filtered">
            <summary> Is filtered? </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._firstChange">
            <summary> True when no changes have been made to the table </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._isDeserialized">
            <summary> True when the helper is deserialized </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._hasAutoincrementCols">
            <summary> Has auto increment columns </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._operationFinished">
            <summary> Operation finished state </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._sqlDeleteQuery">
            <summary> String for delete query </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._sqlInsertQuery">
            <summary> String for insert query </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._sqlUpdateQuery">
            <summary> String for update query </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper.filter">
            <summary>
                actual filter object
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._isClone">
            <summary>
                Flag that indicates if the current recordset is a cloned one
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.SchemaTable_CollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
            <summary>
            Add/remove columns from the main DataTable when columns are added or removed from the SchemaTable.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="dataSetName"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Disconnected">
            <summary>
            Internal variable added to indicate that the recordset is disconnected
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.SetNewValue(System.Int32,System.Object)">
            <summary>
            Sets a new value for a specific index column.
            </summary>
            <param name="columnIndex">Index of the column to be updated.</param>
            <param name="value">New value for column.</param>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Item(System.Object)">
            <summary>
            Indexer to access a field by index or column name (resolved by reflection)
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Item(System.Int32)">
            <summary>
            Indexer to access a field by index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Item(System.String)">
            <summary>
            Indexer to access a field by column name
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Fields">
            <summary>
            Returns a FieldsHelper representing the collection of fields from this RecordsetHelper
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.FieldsMetadata">
            <summary>
                Gets a DataColumnCollection object that contains the information of all columns on the RecordsetHelper.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetFieldMetadata(System.Object)">
            <summary>
                Gets a DataColumn object that contains the information of the specified column
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.BeforeMove">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.NewRecord">
            <summary>
            Fires event when a new record is been created.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateInstance">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._opened">
            <summary>
            open state
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Opened">
            <summary>
            Indicates if this RecordsetHelper have been open.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._sqlSelectQuery">
            <summary>
            string for select query
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.SqlQuery">
            <summary>
            Gets or sets the SQL query used for select operations in this RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.ActiveConnection">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.ConnectionString">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.ProviderFactory">
            <summary>
            Gets or sets the DBProviderFactory to be use by this object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.getCommandType(System.String)">
            <summary>
                Infers the command type from an sql string getting the schema metadata from the database.
            </summary>
            <param name="sql">The sql string to be analyzed</param>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AfterMove">
            <summary>
            Handler for AfterMove Event
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AfterQuery">
            <summary>
            Handler for After Query Event
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Sort">
            <summary>
              Gets or sets the sort column or columns, and sort order for the RecordSet.
            </summary>
            <returns>
                A string that contains the column name followed by "ASC" (ascending) or "DESC"
                (descending). Columns are sorted ascending by default. Multiple columns can be
                separated by commas.
            </returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Close">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.RecordCount">
            <summary>
            Gets the current total number of records on the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AbsolutePosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MoveFirst">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._bof">
            <summary>
                is beginning of file
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.BOF">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MovePrevious">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Move(System.Int32)">
            <summary>
            Moves the position of the current record
            </summary>
            <param name="records">The number of records that the current record position moves</param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MoveAfterFilter">
            <summary>
            Performs the move action after setting a filter
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._eof">
            <summary>
                is end of file
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.EOF">
            <summary>
                Gets a bool value indicating if the current record is the last one in the RecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.AddNew">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Update">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MoveLast">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MoveNext">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.CanMovePrevious">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Requery">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._index">
            <summary>
            actual index
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.CurrentPosition">
            <summary>
            Gets or Sets the current Record position inside the RecordsetHelper.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.CurrentRow">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.CurrentRecordSet">
            <summary>
            Pointer to CurrentRecordset when there are multiple recordset request or response;
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Open">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.CanMoveNext">
            <summary>
            
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._source">
            <summary>
                actual object source
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Source">
            <summary>
                Sets or gets the source to obtain the necessary queries. Can be DBCommand or String.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AllowEdit">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AllowNew">
            <summary>
            
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.AllowDelete">
            <summary>
            
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CloneCommand(System.Data.Common.DbCommand)">
            <summary>
            Clone a command
            </summary>
            <param name="dbCommand"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.ComputeValue(System.String)">
            <summary>
             Send to DB query to compute.
            </summary>
            <param name="expression">The query to compute</param>
            <returns>The value computed</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateCommand(System.String,System.Data.CommandType)">
            <summary>
            Creates a DBCommand object using de provided parameters.
            </summary>
            <param name="commandText">A string containing the SQL query.</param>
            <param name="commandType">The desire type for the command.</param>
            <returns>A new DBCommand object containing the SLQ code received has parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateCommand(System.String,System.Data.CommandType,System.Collections.Generic.List{System.Data.Common.DbParameter})">
            <summary>
            
            </summary>
            <param name="commandText"></param>
            <param name="commandType"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateParameterFromColumn(System.String,System.Data.DataColumn)">
            <summary>
            Creates a Dbparameter obtaining the information from a DataColumn object.
            </summary>
            <param name="paramName">The name for the parameter.</param>
            <param name="dColumn">The DataColumn object to extract the information from.</param>
            <returns>A new DBParameter object containing the desired configuration.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.DatabaseType">
            <summary>
            Gets or sets the DatabaseType being use by this object. 
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.disableEventsWhileDeleting">
            <summary>
            This flag is used to stop the propagation of events while performing a delete.
            It was found that deleting a DataRow raised several events on the binding source
            and these events update the current row which must remain the same until the update logic is executed
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetField(System.Object)">
            <summary>
                Gets or sets the row value at �ColumnName� index.
            </summary>
            <param name="columnReference">Reference to the desired column.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetColumnIndexByName(System.String)">
            <summary>
            Looks for a column with the given name and returns the column index
            or -1 if not found
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._currentView">
            <summary>
            current view
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.UsingView">
            <summary>
            Property used to determine if the data needs to be get from a dataview or the table directly
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.IsNull(System.String)">
            <summary>
            Gets a value that indicates whether the named column contains a null value.
            </summary>
            <param name="columnName">The name of the column.</param>
            <returns>true if the column contains a null value; otherwise, false.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.LoadSchema">
            <summary>
            This is property is used when the record set uses more than one table,
            uses CommandBuilder, primary keys or, any other metadata information.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.SchemaTable">
            <summary>
            DataTable to hold the schema separated from the DataTable that contains data in order to avoid validations to happen as rows are edited/added.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.LoadSchemaOnly">
            <summary>
            Used to signal to load only the schema and not fill any data, useful to retrieve meta information
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.OnAfterMove">
            <summary>
            Sets the AfterMove EventHandler.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.OnAfterQuery">
            <summary>
                Sets the AfterQuery eventHandler.
            </summary>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._activeCommand">
            <summary>
            active command
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CopySourceCommand">
            <summary>
            Returns a copy of the current ActiveCommand of this RecordsetHelper.
            </summary>
            <returns>A copy of the current ActiveCommand.</returns>
        </member>
        <member name="F:UpgradeHelpers.DB.RecordSetHelper._newRow">
            <summary>
            new row state
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.DoCancelUpdate">
            <summary>
            Cancels any changes made to the current or new row of a ADORecordsetHelper object.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.getTableName(System.String,System.Boolean)">
            <summary>
            Analyzes an SQL Query and obtain the name of the table.
            </summary>
            <param name="sqlSelectQuery">The SQL query containing the name of the table.</param>
            <param name="useParam"> When use the first table name in the query, by default is false.</param>
            <returns>The SQL query containing the name of the table.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.getTableName(System.String)">
            <summary>
            Analyzes an SQL Query and obtain the name of the table.
            </summary>
            <param name="sqlSelectQuery">The SQL query containing the name of the table.</param>
            
            <returns>The SQL query containing the name of the table.</returns>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.Filter">
            <summary>
                Sets the Filter to by applied to the this ADORecordsetHelper. (valid objects are: string, DataViewRowState and DataRow[]).
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.IsEof">
            <summary>
                Determines if we should be at the end of file (EOF) based on the current index.
            </summary>
            <returns>Returns true if based on the index variable EOF is true; otherwise false.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.SetFilter(System.String)">
            <summary>
                Sets the filter for the RecordsetHelper.
            </summary>
            <param name="filter">The filter to apply to this RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.SetFilter(System.Data.DataViewRowState)">
            <summary>
                Sets the filter for the RecordsetHelper.
            </summary>
            <param name="filter">The filter to apply to this RecordsetHelper.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.RecordSetHelper_RowUpdatedOleDb(System.Object,System.Data.Common.RowUpdatedEventArgs)">
            <summary>
                OleDb Row Updated event
            </summary>
            <param name="sender">object</param>
            <param name="e">Row updated event args</param>
        </member>
        <member name="P:UpgradeHelpers.DB.RecordSetHelper.LastIdentity">
            <summary>
            Returns the last identity value inserted into an identity column
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.FillSchema(System.Data.Common.DbDataAdapter)">
            <summary>
            Loads the schema of the RecordSetHelper. The schema is loaded in a separate table to avoid validations to happen as rows are added/edited.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateUpdateCommandFromMetaData">
            <summary>
                Creates an update command using the information contained in the RecordsetHelper.
            </summary>
            <returns>A DBCommand object containing an update command.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateDeleteCommandFromMetaData">
            <summary>
                Creates a delete command using the information contained in the RecordsetHelper.
            </summary>
            <returns>A DBCommand object containing a delete command.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CreateInsertCommandFromMetaData">
            <summary>
                Creates an insert command using the information contained in the RecordsetHelper.
            </summary>
            <returns>A DBCommand object containing an insert command.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetTable">
            <summary>
                Returns the table according to the status View/Table of the RecordSet
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.IsNextDataType(System.Data.DataColumn)">
            <summary>
            To know if the type of the column is nText database type, the type has to be mapped to string
            and the max length of the type has to be NTEXT_MAX_LENGTH
            </summary>
            <param name="dColumn">The dataColumn that needs to be questioned</param>
            <returns>True if the type of dColumn is nText database type, false otherwise</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.CloneIt(UpgradeHelpers.DB.RecordSetHelper,UpgradeHelpers.DB.RecordSetHelper)">
            <summary>
                Clone a source ADORecordSetHelper through a target ADORecordSetHelper
            </summary>
            <param name="source">The source ADORecordSetHelper</param>
            <param name="target">The target ADORecordSetHelper</param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.Dispose(System.Data.Common.DbDataAdapter)">
            <summary>
            Releases resources for a DbDataAdapter
            It must be check if the adapter holds a reference to the
            active command to avoid disposing it, if it is still used
            </summary>
            <param name="dbAdapter">the dbAdpater to be disposed</param>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.GetDBType(System.Type)">
            <summary>
                Converts from System.Type to DbType.
            </summary>
            <param name="type">The System.Type to be converted.</param>
            <returns>The equivalent DBType.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.MapToDbType(System.String)">
            <summary>
                Turns the DB type string to corresponding CLR type string.
            </summary>
            <param name="strDbType"></param>
            <returns></returns>
        </member>
        <member name="M:UpgradeHelpers.DB.RecordSetHelper.commandParameterBinding(System.Data.Common.DbCommand,System.String)">
            <summary>
                Verifies if a parameter with the provided name exists on the command received, otherwise a new parameter using the specified name.
            </summary>
            <param name="command">The command object to look into.</param>
            <param name="name">The name of the parameter to look for.</param>
            <returns>The parameter named with �name�.</returns>
        </member>
        <member name="T:UpgradeHelpers.DB.TransactionManager">
            <summary>
            Transaction Manager Class, used to control Database transactions
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.GetCurrentTransaction(System.Data.Common.DbConnection)">
            <summary>
            Returns the Transaction object associated to a connection.
            </summary>
            <param name="conn">The connection to get the transaction from.</param>
            <returns>The transaction associated with the parameter.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.SetCommandTransaction(System.Data.Common.DbCommand)">
            <summary>
            Returns the current command with the transaction associated.
            </summary>
            <param name="commandRef">The connection to get the timeout from.</param>
            <returns>The transaction command associated.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.Commit(System.Data.Common.DbConnection)">
            <summary>
            Commits the transaction associated to the specified connection. Once the Commit is performed the transaction is DeEnlisted.
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.Rollback(System.Data.Common.DbConnection)">
            <summary>
            Rollbacks the transaction associated to the specified connection. Once the Rollback is performed the connection is DeEnlisted.
            </summary>
            <param name="conn">The connection to get the transaction from.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.Enlist(System.Data.Common.DbConnection,System.Data.IsolationLevel)">
            <summary>
            Enlists a Transaction in the transaction manager.
            </summary>
            <param name="conn">The connection to create the transaction.</param>
            <param name="isolationLevel">The isolation level for the transaction.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.Enlist(System.Data.Common.DbConnection)">
            <summary>
            Enlists a Transaction in the transaction manager.
            </summary>
            <param name="conn">The connection to create the transaction.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.Enlist(System.Data.Common.DbTransaction)">
            <summary>
            Enlists a Transaction in the transaction pool.
            </summary>
            <param name="t">The trancsation to be enlisted.</param>
            <returns>The nested level of the transaction.</returns>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.DeEnlist(System.Data.Common.DbConnection,System.Data.Common.DbTransaction)">
            <summary>
            Removes the Transaction associated to the connection object from the transaction manager.
            </summary>
            <param name="conn">The connection instance associated with the transaction.</param>
            <param name="transaction">The transaction attached to the connection.</param>
        </member>
        <member name="M:UpgradeHelpers.DB.TransactionManager.DeEnlist(System.Data.Common.DbConnection)">
            <summary>
            Removes the Transaction from the transaction manager.
            </summary>
            <param name="connection">The connection to be removed.</param>
        </member>
        <member name="T:UpgradeHelpers.DB.ValidatingEventHandler">
            <summary>
            Delegate ValidatingEventHandler, used to process event ValidatingEventHandler.
            </summary>
            <param name="sender">Object sender.</param>
            <param name="e">ValidatingEventArgs to process.</param>
        </member>
        <member name="T:UpgradeHelpers.DB.ValidatingEventArgs">
            <summary>
            Class ValidatingEventArgs, used to process event ValidatingEventHandler parameters.
            </summary>
        </member>
        <member name="M:UpgradeHelpers.DB.ValidatingEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor ValidatingEventArgs, recive Action and Save.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.ValidatingEventArgs.Action">
            <summary>
            Integer Property Action.
            </summary>
        </member>
        <member name="P:UpgradeHelpers.DB.ValidatingEventArgs.Save">
            <summary>
            Integer Property Save.
            </summary>
        </member>
        <member name="T:DBTrace">
            <summary>
            
            </summary>
        </member>
        <member name="M:DBTrace.OpenWithTrace(System.Data.Common.DbConnection)">
            <summary>
            
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:DBTrace.CreateConnectionWithTrace(System.Data.Common.DbProviderFactory)">
            <summary>
            CreateConnectionWithTrace
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="M:DBTrace.NewConnectionstring(System.String)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
    </members>
</doc>
